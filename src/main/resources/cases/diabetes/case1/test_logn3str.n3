@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix dc: <http://purl.org/dc/elements/1.1/>.
@prefix DMTO: <https://bioportal.bioontology.org/ontologies/DMTO.owl#>.
@prefix DTO: <https://bioportal.bioontology.org/ontologies/DTO.owl#>.
@prefix DDO: <http://purl.obolibrary.org/obo/DDO.owl#>.
@prefix obo: <http://purl.obolibrary.org/obo#>.
@prefix owl: <http://www.w3.org/2002/07/owl#>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix xml: <http://www.w3.org/XML/1998/namespace>.
@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.
@prefix foaf: <http://xmlns.com/foaf/0.1/>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix skos: <http://www.w3.org/2004/02/skos/core#>.
@prefix math: <http://www.w3.org/2000/10/swap/math#>.
@prefix cg: <http://niche.cs.dal.ca/codegen.owl#>.
@prefix r: <http://www.w3.org/2000/10/swap/reason#>.
@prefix var: <http://josd.github.io/var#>.
@prefix n3: <http://www.w3.org/2004/06/rei#>.
@prefix e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#>.
@prefix x: <http://wvw.org/xai#> .
@base <http://wvw.org/xai> .


<#lemma20> a r:Inference;
  r:gives {
    DMTO:patient0_profile DDO:DDO_0000139 _:sk_0.
    _:sk_0 a <https://bioportal.bioontology.org/ontologies/DTO.owl#DTO:0002078>.
  } .


{   ?x r:gives ?value . 
	?value e:labelvars ?valuel.
	?valuel log:includes { ?s ?p ?o } .

} => { ?valuel x:term ?s , ?p , ?o } .


{   ?value x:term ?t .
    ?t log:rawType log:Other .

    ?t log:uri ?uri .
     ( ?uri ".*?#(.*)" ) string:scrape ?ln .

    ?t log:localN3String ?ts .

} => { ?ts x:description ?ln } .


{   ?x!rdf:type list:in ( r:Extraction r:Inference ) .
    ?x r:gives ?value .
    ?value e:labelvars ?valuel .

    ( ?str
    {
        ?valuel e:graphMember ?m .
        ?m log:includes { ?s ?p ?o } .
        
        ?s!log:localN3String x:description ?sd .
        ?p!log:localN3String x:description ?pd .
        ?o!log:localN3String x:description ?od .
        ( ?sd " " ?pd " " ?od " , " ) string:concatenation ?str .

    } ?strs ) log:collectAllIn _:x .
    
    ?strs string:concatenation ?str .
    ( ?str "(.*) , $" ) string:scrape ?str2 . 
    

} => { ?x x:conclusionStr ?str2 } .