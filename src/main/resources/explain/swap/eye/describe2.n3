@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix dc: <http://purl.org/dc/terms/> .
@prefix pml: <http://provenanceweb.org/ns/pml#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix graph: <http://www.w3.org/2000/10/swap/graph#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix math: <http://www.w3.org/2000/10/swap/math#> .
@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@prefix r: <http://www.w3.org/2000/10/swap/reason#> .
@prefix e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#>.
@prefix n3: <http://www.w3.org/2004/06/rei#>.
@prefix x: <http://wvw.org/xai#> .
@base <http://wvw.org/xai#> .

# divide
# (all terms to be described are indicated as "x:term"s)

{   ?x r:gives ?value . # formula
	?value e:labelvars ?valuel.
	?valuel log:includes { ?s ?p ?o } .
	
} => { 	?valuel x:term ?s , ?p , ?o } .


{	?value x:term ?t .
	?t log:rawType rdf:List .
	?t e:labelvars ?tl .
	
	?tl list:member ?m
	
} => { 	?tl x:term ?m } .


{ 	?value x:term ?t .
	?t log:rawType log:Formula .
	?t e:labelvars ?tl .
	
	?tl e:graphMember ?m .
	?m log:includes { ?s ?p ?o } .

} => { 	?tl x:term ?s , ?p , ?o } . 


# conquer
# (generate strings for every "x:term" as "x:description"s)

# atomic terms

{   ?value x:term ?t .
    ?t log:rawType log:Other .
	_:x log:notIncludes { ?t rdfs:label ?l } .
    ?t log:uri ?uri .
    ( ?uri ".+#(.+)" ) string:scrape ?ln .
	( ":" ?ln ) string:concatenation ?ln2 . 

    ?t log:localN3String ?ts .

} => { ?ts x:description ?ln2 } .


{   ?value x:term ?t .
	?t log:rawType log:Other .
    ?t log:uri ?uri .
    ?uri string:notMatches ".+#.+" .

    ?t log:localN3String ?ts .

} => { ?ts x:description ":" } .


{   ?value x:term ?t .
    ?t log:rawType log:Other .
	?t rdfs:label ?l .
	( "'" ?l "'" ) string:concatenation ?l2 .
		
	?t!e:labelvars log:localN3String ?ts .
	
} => { ?ts x:description ?l2 } .


{ 	?value x:term ?t .
	?t log:rawType log:Literal .
	( "\"" ?t "\"" ) string:concatenation ?t2 .

	?t log:localN3String ?ts .

} => { ?ts x:description ?t2 } .

# compound terms

# (collect all "x:description"s of formula terms and use to describe formula itself)
{   ?value x:term ?form .
	?form log:rawType log:Formula .
	?form e:labelvars ?forml .

    ( ?td
    {
        ?forml e:graphMember ?m .
		?m log:includes { ?s ?p ?o } .
	
        ?s!e:labelvars!log:localN3String x:description ?sd .
        ?p!e:labelvars!log:localN3String x:description ?pd .
        ?o!e:labelvars!log:localN3String x:description ?od .
        
        ( ?sd " " ?pd " " ?od " ." ) string:concatenation ?td .

    } ?strs ) log:collectAllIn _:x .
    
    ?form graph:length ?strs!list:length .
    
    ( ?strs " " ) string:join ?str2 .
    ( "{ " ?str2 " }" ) string:concatenation ?str3 .

	?forml log:localN3String ?fs

} => { ?fs x:description ?str3 } .


# finalize

# (using "x:description"s of terms, generate strings for "r:gives"s)
{	?x!rdf:type list:in ( r:Extraction r:Inference r:Fact ) .
    ?x r:gives ?value .
    ?value e:labelvars ?valuel .

    ( ?str
    {	?valuel e:graphMember ?m .
        ?m log:includes { ?s ?p ?o } .
        
        # checking for x:description fails for last lemma in test.ttl
        # (regardless of which lemma; it just has to be listed as last)
        
        #?s!e:labelvars log:localN3String ?sd . 
        ?s!e:labelvars!log:localN3String x:description ?sd .
        
        #?p!e:labelvars log:localN3String ?pd . 
        ?p!e:labelvars!log:localN3String x:description ?pd .
        
        #?o!e:labelvars log:localN3String ?od . 
        ?o!e:labelvars!log:localN3String x:description ?od .
        
        ( ?sd ?pd ?od ) log:equalTo ?str .

    } ?strs ) log:collectAllIn _:x .
    
} => {	?x x:conclusionStr ?strs } .